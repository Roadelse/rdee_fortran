Module rdee_ds
    ! This module contains implement of generic linked list in Fortran
    Use rdee_base
    Use rdee_algo

    ! Private

    ! public :: node, list
    ! public :: operator(==)

    Type node
    ! this class implement the node for list and dict structure, via generic data type in scalar and 1-d array
    ! To be simple, the pointers within type should never point to target variables!
    ! always allocate them, i.e., use the noname variable, so it can be deallocated!
        Type(node),Pointer :: next => null(), prev => null()
        class(*), Allocatable :: key
        Class(*), Allocatable :: item, item1d(:) ! , item2d(:, :) => null(), item3d(:, :, :) => null()
        integer :: style = 0  ! 1 - v node, 2 - v1d node, -1 - k-v node, -2 - k-v1d node
      contains
        final :: node_destructor
        procedure :: reset => node_reset

        Procedure :: print => node_print
      
        procedure ::node_get_item
        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: node_get_item1d_{{ type }}, fget1d_{{ type }} => node_fget_item1d_{{ type }}, fget_{{ type }} => node_fget_item_{{ type }}
        !#jj2 endfor

        Generic :: get => node_get_item, &
        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
            node_get_item1d_{{ type }}{{ ', &' if not loop.last }}
        !#jj2 endfor

        Procedure :: node_set_v, node_set_v1d, node_set_k_v, node_set_k_v1d
        Generic :: set => node_set_v, node_set_v1d, node_set_k_v, node_set_k_v1d

        Procedure :: getKey => node_getKey

        Procedure :: hasKey => node_hasKey
    End Type

    Type list
        Type(node),pointer :: head => null(), tail => null()
        integer :: size = 0
        integer :: style = 0
      Contains
        final :: list_destructor
        Procedure :: print => list_print
        Procedure :: reset => list_reset

        !#jj2 for type in ['node', 'int', 'int8', 'intA1d', 'int8A1d', 'float', 'floatA1d', 'double', 'doubleA1d', 'logical', 'logicalA1d', 'string', 'stringA1d']:
        Procedure :: list_get_{{ type }}
        !#jj2 endfor
        Generic :: get => &
        !#jj2 for type in ['node', 'int', 'int8', 'intA1d', 'int8A1d', 'float', 'floatA1d', 'double', 'doubleA1d', 'logical', 'logicalA1d', 'string', 'stringA1d']:
            list_get_{{ type }}{{ ',&' if not loop.last }}
        !#jj2 endfor

        !#jj2 for type in ['node', 'int', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: fget_{{type}} => list_fget_{{ type }}
        !#jj2 endfor
        !#jj2 for type in ['int', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: fget1d_{{type}} => list_fget_{{ type }}A1d
        !#jj2 endfor



        Procedure :: list_append, list_append_a1d
        Generic :: append => list_append, list_append_a1d
        Procedure :: list_insert, list_insert_a1d
        Generic :: insert => list_insert, list_insert_a1d
        Procedure :: list_set, list_set_a1d
        Generic :: set => list_set, list_set_a1d

        Procedure :: list_delete_by_value, list_delete_by_value_a1d
        Generic :: del => list_delete_by_value, list_delete_by_value_a1d
        Procedure :: pop => list_delete_by_pos

        Procedure :: list_index, list_index_a1d
        Generic :: index => list_index, list_index_a1d
        Procedure :: popKey => list_delete_by_key

        Procedure :: keys => list_keys
        Procedure :: extend => list_extend

        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: list_toArray_{{ type }}
        !#jj2 endfor
        Generic :: toArray => &
        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
            list_toArray_{{ type }}{{ ',&' if not loop.last }}
        !#jj2 endfor

        Procedure :: reverse => list_reverse

    End Type

    Type dict
        type(list),allocatable :: lists(:)
        integer :: size = 0
        procedure(hash_a2i), pointer, nopass :: hashFunc
      Contains
        final :: dict_destructor
        Procedure :: dict_get
        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: dict_get1d_{{ type }}
        !#jj2 endfor
        Generic :: get => dict_get, &
        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
            dict_get1d_{{ type }}{{ ',&' if not loop.last }}
        !#jj2 endfor

        !#jj2 for type in ['int4', 'int8', 'float', 'double', 'logical', 'string']:
        Procedure :: fget1d_{{ type }} => dict_fget1d_{{ type }}
        Procedure :: fget_{{ type }} => dict_fget_{{ type }}
        !#jj2 endfor



        Procedure :: dict_set, dict_set_a1d, dict_set_node
        Generic :: set => dict_set, dict_set_a1d, dict_set_node
        Procedure :: del => dict_del
        Procedure :: hash => dict_hash
        Procedure :: reset => dict_reset
        Procedure :: print => dict_print
        Procedure :: keys => dict_keys
        Procedure :: update => dict_update
        Procedure :: hasKey => dict_hasKey
        Procedure :: p2node => dict_p2node
    End Type

    abstract Interface
        function hash_a2i(a, S) result(rst_idx)
            implicit none
            ! ......................... Argument
            class(*),intent(in) :: a
            integer, intent(in) :: S
            ! ......................... return variables
            integer :: rst_idx
        end function
    end interface


    Interface node
        module procedure node_constructor
        module procedure node_constructor_v
        module procedure node_constructor_v1d
        module procedure node_constructor_k_v
        module procedure node_constructor_k_v1d
    End Interface

    Interface list
        module procedure list_constructor
        module procedure list_constructor_sc
        module procedure list_constructor_a1d
    End Interface

    Interface dict
        module procedure dict_constructor
    End Interface

    Interface assignment(=)
        module procedure node_assign_from_node
    End Interface

    Interface operator(==)
        module procedure eq_node_item_um  ! the left must be type(node)
        module procedure eq_node_item1d_um  ! the left must be type(node)
    End Interface

Contains

# include "rdee_ds.node.inc"

# include "rdee_ds.list.inc"

# include "rdee_ds.dict.inc"


    
End Module